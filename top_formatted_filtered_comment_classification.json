[
    {
        "PR ID": 307712212,
        "Comment ID": 314320356,
        "Comment Author": "arina-ielchiieva",
        "Comment Order": 3,
        "Comment Body": "Please rename method: `void setPosn(int index);`",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 307712212,
        "Comment ID": 314319626,
        "Comment Author": "arina-ielchiieva",
        "Comment Order": 1,
        "Comment Body": "New line.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 307712212,
        "Comment ID": 314788921,
        "Comment Author": "paul-rogers",
        "Comment Order": 62,
        "Comment Body": "Another change you might consider is renaming either this, or the other `SchemaBuilder`. Since this is the one we want to use moving forward, maybe rename the other to `BatchSchemaBuilder` so that future folks don't have to figure out the correct import when the reference the class.",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233061666,
        "Comment ID": 254209328,
        "Comment Author": "StefanRRichter",
        "Comment Order": 24,
        "Comment Body": "disactivated -> deactivated",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233061666,
        "Comment ID": 254209370,
        "Comment Author": "StefanRRichter",
        "Comment Order": 25,
        "Comment Body": "disactivated -> deactivated",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233061666,
        "Comment ID": 254209654,
        "Comment Author": "StefanRRichter",
        "Comment Order": 26,
        "Comment Body": "disactivated -> deactivated",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233061666,
        "Comment ID": 251839757,
        "Comment Author": "StefanRRichter",
        "Comment Order": 12,
        "Comment Body": "Can we say something about how much it will slow compation down and why?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 233061666,
        "Comment ID": 235864262,
        "Comment Author": "Aitozi",
        "Comment Order": 4,
        "Comment Body": "How about `createStateInfo` -> `restoreStateInfo` to be more explicit ?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233061666,
        "Comment ID": 253473339,
        "Comment Author": "StefanRRichter",
        "Comment Order": 19,
        "Comment Body": "Wrong whitespaces",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237484391,
        "Comment Author": "twalthr",
        "Comment Order": 31,
        "Comment Body": "Just call it `Aggregations`?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237488275,
        "Comment Author": "twalthr",
        "Comment Order": 35,
        "Comment Body": "Introduce a subsection `Example` as done in other sections?\r\nRephrase: `The task of the following example is to find... threshold. It shows how...`",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237491268,
        "Comment Author": "twalthr",
        "Comment Order": 36,
        "Comment Body": "```\r\nThe query will accumulate events as part of pattern variable `A` as long as the average price of those events does not exceed `15`. For example, such a limit exceeding happens at `01-Apr-11 10:00:04`. The following period exceeds the average price of `15` again at `01-Apr-11 10:00:10`.\r\n```",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 241787811,
        "Comment Author": "twalthr",
        "Comment Order": 65,
        "Comment Body": "@dawidwys what is `MR` actually doing? Do we have to call `SELECT MR.start_tstamp`?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237460915,
        "Comment Author": "twalthr",
        "Comment Order": 17,
        "Comment Body": "All final variable term in this class must not be created with `newName` they can be constant.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237724165,
        "Comment Author": "dianfu",
        "Comment Order": 46,
        "Comment Body": "code format",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237471737,
        "Comment Author": "twalthr",
        "Comment Order": 24,
        "Comment Body": "Call this variable `isWithinAggExprState` or similar?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237470829,
        "Comment Author": "twalthr",
        "Comment Order": 23,
        "Comment Body": "Give the parameter of this method a better name. Because you assume an aggregate function call in this method.",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237466962,
        "Comment Author": "dianfu",
        "Comment Order": 21,
        "Comment Body": "Flags -> Flag",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 238711587,
        "Comment Author": "twalthr",
        "Comment Order": 58,
        "Comment Body": "The naming is still not perfect here. What is the difference between `generateAggAccess` and `doGenerateAggAccess`? How about `generateDeduplicatedAggAccess` and `generateAggAccess`?  ",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237472868,
        "Comment Author": "dianfu",
        "Comment Order": 26,
        "Comment Body": "getOrComputeAggregation?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237472659,
        "Comment Author": "dianfu",
        "Comment Order": 25,
        "Comment Body": "What about renaming to generateAggregation?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237466297,
        "Comment Author": "twalthr",
        "Comment Order": 20,
        "Comment Body": "Can you add a high level description how aggregates work in this code generator? Maybe here or even for the top-level class. Otherwise we don't remember it when we have to touch this class again. Maybe a little example code that explains which methods, classes, fields are generated and why? Not super detailed but at least to understand the concept. Actually this is also missing in the AggregationCodeGenerator.",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237726170,
        "Comment Author": "dianfu",
        "Comment Order": 47,
        "Comment Body": "rename to aggCall",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237737335,
        "Comment Author": "dianfu",
        "Comment Order": 51,
        "Comment Body": "What about removing the prefix `single`?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237727039,
        "Comment Author": "dianfu",
        "Comment Order": 48,
        "Comment Body": "`patternName` doesn't reflects what this variable holds. What about rename `patternName` to `eventsExpr` or something else?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237738914,
        "Comment Author": "dianfu",
        "Comment Order": 52,
        "Comment Body": "Remove the whitespace before the colon",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237739790,
        "Comment Author": "dianfu",
        "Comment Order": 53,
        "Comment Body": "rexAggCall renamed to aggCall?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237422674,
        "Comment Author": "twalthr",
        "Comment Order": 5,
        "Comment Body": "Add more documentation to this function? What is `index` good for?",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 233601182,
        "Comment ID": 237434654,
        "Comment Author": "twalthr",
        "Comment Order": 7,
        "Comment Body": "nit: We are already in the `MatchRecognizeITCase` so we don't need to prefix every method with CEP.",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 35890845,
        "Comment ID": 30933376,
        "Comment Author": "chavdar",
        "Comment Order": 6,
        "Comment Body": "What is the return result if there are no data files.\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 36767246,
        "Comment ID": 31570612,
        "Comment Author": "sahilTakiar",
        "Comment Order": 5,
        "Comment Body": "Can you document in more detail how this interface exactly gets used. I don't fully understand the flow from the `ConfigReader` to the `ConfigStepsGenerator` to a `Step`.\n",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 36767246,
        "Comment ID": 31678166,
        "Comment Author": "suvodeep-pyne",
        "Comment Order": 13,
        "Comment Body": "So there is a TestHarnessExecutor and a TestHarnessLauncher. Both have a launchTest method. Could you shed some light on the roles of each of these classes?\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 37074507,
        "Comment ID": 31966553,
        "Comment Author": "liyinan926",
        "Comment Order": 2,
        "Comment Body": "`jsonObject` is a better name than `obj`.\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 37074507,
        "Comment ID": 31966615,
        "Comment Author": "liyinan926",
        "Comment Order": 4,
        "Comment Body": "Missing license header.\n",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 37074507,
        "Comment ID": 32090554,
        "Comment Author": "liyinan926",
        "Comment Order": 20,
        "Comment Body": "Please change to `static final` and use `COLUMNS`.\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 37074507,
        "Comment ID": 31966656,
        "Comment Author": "liyinan926",
        "Comment Order": 6,
        "Comment Body": "Ditto. Missing license header.\n",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 246539821,
        "Comment ID": 258831610,
        "Comment Author": "lanking520",
        "Comment Order": 18,
        "Comment Body": "```suggestion\r\nIt is recommended to not include “IoTDB” in any names to prevent potential trademark issue with the IoTDB project.\r\n```",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 246539821,
        "Comment ID": 258832640,
        "Comment Author": "lanking520",
        "Comment Order": 19,
        "Comment Body": "```suggestion\r\nAs an example, names like “IoTDB BigDataProduct” should not be used, as the name include “IoTDB” in general. The above links, however, describe some exceptions, like for names such as “BigDataProduct, powered by Apache IoTDB” or “BigDataProduct for Apache IoTDB”. In summary, any names contain \"Apache IoTDB\" as a whole are acceptable\r\n```",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 246539821,
        "Comment ID": 258842827,
        "Comment Author": "lanking520",
        "Comment Order": 33,
        "Comment Body": "```suggestion\r\n> When you contribute code, you affirm that the contribution is your original work and that you license the work to the project under the project’s open source license. Whether or not you state this explicitly, by submitting any copyrighted material via pull request, email, or other means you agree to license the material under the project’s open source license and warrant that you have the legal authority to do so. Any new files contributed should be under Apache 2.0 License with a header on top of it.\r\n```",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 246539821,
        "Comment ID": 258847908,
        "Comment Author": "lanking520",
        "Comment Order": 38,
        "Comment Body": "```suggestion\r\n        5. Docs Text: For issues that require an entry in the release notes, this should contain the information that the release manager should include. Issues should include a short summary of what behavior is impacted, and detail on what behavior changed. It can be provisionally filled out when the JIRA is opened, but will likely need to be updated with final details when the issue is resolved.\r\n```",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 246539821,
        "Comment ID": 250666787,
        "Comment Author": "wujysh",
        "Comment Order": 6,
        "Comment Body": "Code style? Add a space after `if`.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 246539821,
        "Comment ID": 250662613,
        "Comment Author": "wujysh",
        "Comment Order": 3,
        "Comment Body": "Better to uppercase IoTDB and Grafana.",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 555516586,
        "Comment ID": 559108008,
        "Comment Author": "jixuan1989",
        "Comment Order": 3,
        "Comment Body": "Is `Layer Name` a new concept?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 127527436,
        "Comment ID": 124366536,
        "Comment Author": "merlimat",
        "Comment Order": 12,
        "Comment Body": "Last comment on this :) \r\n\r\nWhat about renaming it to something like `authorizationAllowWildcardsMatching` ?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 127527436,
        "Comment ID": 124100809,
        "Comment Author": "saandrews",
        "Comment Order": 1,
        "Comment Body": "Don't we have to cover the case with *.my for namespace as well?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 127527436,
        "Comment ID": 124101111,
        "Comment Author": "saandrews",
        "Comment Order": 2,
        "Comment Body": "We need to add a case to cover prefix match as well?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 277324326,
        "Comment ID": 282532700,
        "Comment Author": "Jennifer88huang-zz",
        "Comment Order": 7,
        "Comment Body": "use lowercase \"r\".",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 277324326,
        "Comment ID": 282521767,
        "Comment Author": "Jennifer88huang-zz",
        "Comment Order": 5,
        "Comment Body": "```suggestion\r\n#### What your package contains\r\n```",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 277324326,
        "Comment ID": 282521418,
        "Comment Author": "Jennifer88huang-zz",
        "Comment Order": 4,
        "Comment Body": "```suggestion\r\n### Start Pulsar standalone\r\n```",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 277324326,
        "Comment ID": 282520044,
        "Comment Author": "Jennifer88huang-zz",
        "Comment Order": 3,
        "Comment Body": "```suggestion\r\nPulsar provides a CLI tool called [`pulsar-client`](reference-cli-tools.md#pulsar-client). The pulsar-client tool enables you to consume and produce messages to a Pulsar topic in a running cluster. \r\n```",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 277324326,
        "Comment ID": 283635822,
        "Comment Author": "Jennifer88huang-zz",
        "Comment Order": 11,
        "Comment Body": "We can adopt either of the following two options:\r\n1. Press Ctrl+C to ... (from IBM style guides)\r\n2. Press CTRL+C to ... (Microsoft style)\r\n- When you write about two or more keys that are used in combination to perform a function, use the plus sign (+) to separate the key names. Do not insert a space before or after the plus sign.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 375181038,
        "Comment ID": 379702123,
        "Comment Author": "codelipenghui",
        "Comment Order": 6,
        "Comment Body": "It's better to named isKeyBase64Encoded().",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 658318825,
        "Comment ID": 642504225,
        "Comment Author": "gaoran10",
        "Comment Order": 1,
        "Comment Body": "Could you fix the doc?",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 658318825,
        "Comment ID": 642504392,
        "Comment Author": "gaoran10",
        "Comment Order": 2,
        "Comment Body": "Same as above.",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 658318825,
        "Comment ID": 642579859,
        "Comment Author": "gaoran10",
        "Comment Order": 5,
        "Comment Body": "maybe `fireChannelUnregistered`?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 661985260,
        "Comment ID": 646221680,
        "Comment Author": "Anonymitaet",
        "Comment Order": 1,
        "Comment Body": "```suggestion\r\nhttps://pulsar.apache.org/docs/en/next/security-overview/.\r\n```\r\nSuggest using the latest info",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 661985260,
        "Comment ID": 803219706,
        "Comment Author": "codelipenghui",
        "Comment Order": 6,
        "Comment Body": "4 major releases?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 677542787,
        "Comment ID": 661112139,
        "Comment Author": "gaoran10",
        "Comment Order": 11,
        "Comment Body": "Does the TLS could work well with socks5?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 677542787,
        "Comment ID": 661118476,
        "Comment Author": "gaoran10",
        "Comment Order": 12,
        "Comment Body": "Does it need to config client by the system property?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 677542787,
        "Comment ID": 661121470,
        "Comment Author": "gaoran10",
        "Comment Order": 17,
        "Comment Body": "Does it need to config client by the system property?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 152961808,
        "Comment ID": 151593201,
        "Comment Author": "liubao68",
        "Comment Order": 1,
        "Comment Body": "indention",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 152961808,
        "Comment ID": 151595655,
        "Comment Author": "WillemJiang",
        "Comment Order": 2,
        "Comment Body": "How can we tell the path by removing the first 4 characters?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 780773455,
        "Comment ID": 750814210,
        "Comment Author": "tuichenchuxin",
        "Comment Order": 8,
        "Comment Body": "remove useless empty line.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 780773455,
        "Comment ID": 749843437,
        "Comment Author": "dongzl",
        "Comment Order": 2,
        "Comment Body": "remove blank line.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 780773455,
        "Comment ID": 753889598,
        "Comment Author": "strongduanmu",
        "Comment Order": 9,
        "Comment Body": "@clbigdata Please add final for ShowTriggersStatementAssert.",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 780773455,
        "Comment ID": 749843540,
        "Comment Author": "dongzl",
        "Comment Order": 3,
        "Comment Body": "remove blank line.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 780773455,
        "Comment ID": 753889804,
        "Comment Author": "strongduanmu",
        "Comment Order": 10,
        "Comment Body": "@clbigdata Please keep indents consistent with the previous one.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 780773455,
        "Comment ID": 750814021,
        "Comment Author": "tuichenchuxin",
        "Comment Order": 7,
        "Comment Body": "Please keep the code style same.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 780773455,
        "Comment ID": 749828286,
        "Comment Author": "tuichenchuxin",
        "Comment Order": 1,
        "Comment Body": "May be show triggers better",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 780773455,
        "Comment ID": 749843712,
        "Comment Author": "dongzl",
        "Comment Order": 4,
        "Comment Body": "remove blank line.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 440613341,
        "Comment ID": 446255031,
        "Comment Author": "bipinprasad",
        "Comment Order": 2,
        "Comment Body": "Minor: Does this method name and signature needs to change since it is setting a flag and not using the supplied parameter?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 159750327,
        "Comment ID": 158387151,
        "Comment Author": "sav007",
        "Comment Order": 1,
        "Comment Body": "should we call this: `useJavaBeansSemanticNaming`?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 159750327,
        "Comment ID": 158608858,
        "Comment Author": "digitalbuddha",
        "Comment Order": 5,
        "Comment Body": "Is it always going to be get? What if we have a variable named enabled, shouldn't it be `isEnabled`? ",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 58318249,
        "Comment ID": 81681146,
        "Comment Author": "HappyRay",
        "Comment Order": 1,
        "Comment Body": "What's the motivation for having this static method and making the constructor private?\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 58318249,
        "Comment ID": 81681271,
        "Comment Author": "HappyRay",
        "Comment Order": 3,
        "Comment Body": "What's the use case for making this field mutable after the instance is created?\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 58318249,
        "Comment ID": 81682185,
        "Comment Author": "HappyRay",
        "Comment Order": 6,
        "Comment Body": "What do you mean?\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 58318249,
        "Comment ID": 81682541,
        "Comment Author": "HappyRay",
        "Comment Order": 9,
        "Comment Body": "The caller has the status value already, what's the advantage of returning the same value?\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 111755563,
        "Comment ID": 107590952,
        "Comment Author": "anupama-pathirage",
        "Comment Order": 1,
        "Comment Body": "Change the year to 2017. Check other files as well",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 111755563,
        "Comment ID": 107625923,
        "Comment Author": "sameerajayasoma",
        "Comment Order": 4,
        "Comment Body": "s/BValueType.class/BValue.class",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 167635693,
        "Comment ID": 166621095,
        "Comment Author": "shafreenAnfar",
        "Comment Order": 17,
        "Comment Body": "Shall we swap above two lines in order to maintain vertical affinity ?",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 167635693,
        "Comment ID": 166638240,
        "Comment Author": "shafreenAnfar",
        "Comment Order": 24,
        "Comment Body": "Shall we say rawUrl ?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 167635693,
        "Comment ID": 166621254,
        "Comment Author": "shafreenAnfar",
        "Comment Order": 18,
        "Comment Body": "shall we rename this to extractMatrixParams?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 167635693,
        "Comment ID": 166637965,
        "Comment Author": "shafreenAnfar",
        "Comment Order": 23,
        "Comment Body": "shall say urlWithoutMatrixParam ?\r\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 167635693,
        "Comment ID": 166585314,
        "Comment Author": "shafreenAnfar",
        "Comment Order": 5,
        "Comment Body": "This should be getValidatedURI (and yeah I wrote that function :D)",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 167635693,
        "Comment ID": 166614528,
        "Comment Author": "anupama-pathirage",
        "Comment Order": 14,
        "Comment Body": "Why do we need to check splitPathSegment.length > 1 here?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 167635693,
        "Comment ID": 166615140,
        "Comment Author": "anupama-pathirage",
        "Comment Order": 15,
        "Comment Body": "Do we need this if check here?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 167635693,
        "Comment ID": 166615259,
        "Comment Author": "anupama-pathirage",
        "Comment Order": 16,
        "Comment Body": "Please add a doc comment for the class",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 173906340,
        "Comment ID": 173358831,
        "Comment Author": "anupama-pathirage",
        "Comment Order": 6,
        "Comment Body": "Shall we rename this to keyVal or keyValue. same goes with keyvalSep - keyValSep or KeyValueSep",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 186609740,
        "Comment ID": 186976612,
        "Comment Author": "anupama-pathirage",
        "Comment Order": 1,
        "Comment Body": "Shall we combine above two lines into a single line?",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 186609740,
        "Comment ID": 186977745,
        "Comment Author": "anupama-pathirage",
        "Comment Order": 2,
        "Comment Body": "Shall we reformat the above line ?",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 420987992,
        "Comment ID": 434196362,
        "Comment Author": "dulajdilshan",
        "Comment Order": 13,
        "Comment Body": "Copyright year\r\n```suggestion\r\n *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\r\n```",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 456774627,
        "Comment ID": 461354472,
        "Comment Author": "Dilhasha",
        "Comment Order": 3,
        "Comment Body": "Can you check the formatting here? Seems this is not formatted correctly.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 456774627,
        "Comment ID": 461431413,
        "Comment Author": "anupama-pathirage",
        "Comment Order": 6,
        "Comment Body": "Not formatted properly",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 610304775,
        "Comment ID": 608523106,
        "Comment Author": "MaryamZi",
        "Comment Order": 6,
        "Comment Body": "@rdhananjaya, hope this check here is sufficient. ",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 610304775,
        "Comment ID": 610004088,
        "Comment Author": "MaryamZi",
        "Comment Order": 10,
        "Comment Body": "The spec says\r\n> The attach-point determines the second argument passed to the attach method: if the attach-point is absent, then the argument is nil; if it is a string-literal, then the argument is a string; otherwise, **it is an absolute-resource-path and the argument is an array of strings, with one string for each resource-path-segment.**\r\n\r\nIn this case, is it correct for the array to have a single member \"/\" or should it be an empty array? :thinking:  ",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33418330,
        "Comment Author": "akiezun",
        "Comment Order": 9,
        "Comment Body": "add class comment\nmake final or document subclass contract\n",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33691783,
        "Comment Author": "davidadamsphd",
        "Comment Order": 66,
        "Comment Body": "Integer.MAX_VALUE?\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33483231,
        "Comment Author": "akiezun",
        "Comment Order": 19,
        "Comment Body": "why fully qualified name? is that a remnant of Read/Read name overloading?\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33418361,
        "Comment Author": "akiezun",
        "Comment Order": 13,
        "Comment Body": "having negatives in API names is bizarre. `read.isMapped()` looks so much better than `! read.isUnmapped()`\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33418383,
        "Comment Author": "akiezun",
        "Comment Order": 14,
        "Comment Body": "same here: `! read.failsVendorQualityCheck()` would look much better as `read.passesVendorQualityCheck()`\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33484979,
        "Comment Author": "akiezun",
        "Comment Order": 25,
        "Comment Body": "Boolean -> boolean\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33700810,
        "Comment Author": "davidadamsphd",
        "Comment Order": 67,
        "Comment Body": "RandomGoogleRead please :)\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33487470,
        "Comment Author": "akiezun",
        "Comment Order": 32,
        "Comment Body": "this name is too long. \n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33487493,
        "Comment Author": "akiezun",
        "Comment Order": 33,
        "Comment Body": "name too long\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33488235,
        "Comment Author": "akiezun",
        "Comment Order": 37,
        "Comment Body": "Either at the interface level or at the method level define whether the caller can perform modifying operations on the read and what happens if they do. Also, specify if the underlying object can change. Ie, once I have a GATKRead, can it change from under me (ie can a method on a GATKRead returns something and then the same method return something else some other time?)\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 34049631,
        "Comment Author": "lbergelson",
        "Comment Order": 71,
        "Comment Body": "Does this include clipped bases? \n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 34049344,
        "Comment Author": "lbergelson",
        "Comment Order": 69,
        "Comment Body": "I assume null contig isn't allowed here?  Does this set the read is mapped flag?  I'm guessing not because of the unmapped reads with position thing?\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 34049392,
        "Comment Author": "lbergelson",
        "Comment Order": 70,
        "Comment Body": "What happens if you pass in an unmapped locatable?  \n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33488354,
        "Comment Author": "akiezun",
        "Comment Order": 38,
        "Comment Body": "it is going to be pretty confusing to have a isPaired and isProperlyPaired operations\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33488582,
        "Comment Author": "akiezun",
        "Comment Order": 40,
        "Comment Body": "do we need this method given the isFirstOfPair() method? What is the relationship between these two?\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33488718,
        "Comment Author": "akiezun",
        "Comment Order": 43,
        "Comment Body": "final, I hope\n",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33488865,
        "Comment Author": "akiezun",
        "Comment Order": 44,
        "Comment Body": "wait what? what does it mean to set a UUID to a immutable read?\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33489145,
        "Comment Author": "akiezun",
        "Comment Order": 45,
        "Comment Body": "this reads weird. `return assert...`. Prefer to split assertion and return to two lines\n",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33490757,
        "Comment Author": "akiezun",
        "Comment Order": 53,
        "Comment Body": "make final and add the field to serialize\n",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33491186,
        "Comment Author": "akiezun",
        "Comment Order": 56,
        "Comment Body": "is there an HTSJDK tag for this attribute? or BQSR?\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 38669665,
        "Comment ID": 33491464,
        "Comment Author": "akiezun",
        "Comment Order": 58,
        "Comment Body": "this code suggests that the constant should be renamed to `SAM_READ_REV_STRAND_FLAG` or something\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 151315894,
        "Comment ID": 152980029,
        "Comment Author": "romani",
        "Comment Order": 7,
        "Comment Body": "please add in front:\r\n`Javadoc comment contains of: summary(first) sentence, documentation section, tag section.`",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 151315894,
        "Comment ID": 153621987,
        "Comment Author": "rnveach",
        "Comment Order": 9,
        "Comment Body": "`Javadoc comment contains of:` => `Javadoc comments contain:`\r\n`clear and punchy, short and ended by` => `clear, punchy, short, and is ended by`\r\n`dot symbol` => `period symbol`\r\n\r\n> Javadoc comments contain\r\n\r\nShould this be `should contain`? These areas aren't really required otherwise we wouldn't need the `JavadocMethod` check. Tag section is completely optional if there are no parameters/returns/throws.",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 151315894,
        "Comment ID": 153624465,
        "Comment Author": "rnveach",
        "Comment Order": 10,
        "Comment Body": "> The tag section starts with \r\n\r\nAs mentioned in previous item, tag section is technically optional.",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 406948586,
        "Comment ID": 423064146,
        "Comment Author": "strkkk",
        "Comment Order": 1,
        "Comment Body": "indentation",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 406948586,
        "Comment ID": 423068409,
        "Comment Author": "strkkk",
        "Comment Order": 5,
        "Comment Body": "`files contain` may be `file contains` is more precise.",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 406948586,
        "Comment ID": 423928649,
        "Comment Author": "strkkk",
        "Comment Order": 12,
        "Comment Body": "please make list like `<ul>` and items in `<li>` tag",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 406948586,
        "Comment ID": 423065253,
        "Comment Author": "strkkk",
        "Comment Order": 2,
        "Comment Body": "above lines should be in description, here should be examples",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 406948586,
        "Comment ID": 424220759,
        "Comment Author": "strkkk",
        "Comment Order": 17,
        "Comment Body": "please change it to block comment example. Showing empty file looks strange",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 406948586,
        "Comment ID": 423932421,
        "Comment Author": "strkkk",
        "Comment Order": 13,
        "Comment Body": "Please change examples.\r\nMake it like\r\n```\r\nContent of the file:\r\n... // violation\r\n```",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 406948586,
        "Comment ID": 424266181,
        "Comment Author": "strkkk",
        "Comment Order": 22,
        "Comment Body": "no need to escape asterisk",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 406948586,
        "Comment ID": 424267426,
        "Comment Author": "strkkk",
        "Comment Order": 24,
        "Comment Body": "violation is reported on line 1, so violation comment should be there as well",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 406948586,
        "Comment ID": 425970937,
        "Comment Author": "pbludov",
        "Comment Order": 26,
        "Comment Body": "The description of the check is confusing. Will any file with a single/multi-line comment be considered empty? Or just a file with there is nothing except for some comments within?\r\nCould you please make it more clear?",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 406948586,
        "Comment ID": 424221192,
        "Comment Author": "strkkk",
        "Comment Order": 18,
        "Comment Body": "indentation here and above should be 2 spaces",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 406948586,
        "Comment ID": 424221309,
        "Comment Author": "strkkk",
        "Comment Order": 19,
        "Comment Body": "same here and above",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 406948586,
        "Comment ID": 423927496,
        "Comment Author": "strkkk",
        "Comment Order": 11,
        "Comment Body": "weird indentation",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 257705961,
        "Comment ID": 262630608,
        "Comment Author": "agavra",
        "Comment Order": 4,
        "Comment Body": "```suggestion\r\n    this.valueType = requireNonNull(valueType, \"valueType\");\r\n```",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 257705961,
        "Comment ID": 262640340,
        "Comment Author": "agavra",
        "Comment Order": 6,
        "Comment Body": "The word `Logical` has been overloaded in recent discussions. I think either a short discussion here in the javadoc describing what different schemas exist (logical/SQL/physical/connect/avro...) and their hierarchy or a link to an external discussion would be useful. ",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 257705961,
        "Comment ID": 262642257,
        "Comment Author": "agavra",
        "Comment Order": 7,
        "Comment Body": "@rodesai  mentioned that connect supports non-string keys. Is this something that we don't support?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 193372096,
        "Comment ID": 194908233,
        "Comment Author": "jdmpapin",
        "Comment Order": 5,
        "Comment Body": "Is it necessary to create `compressedRefs` here? My impression is that these anchors are created as necessary during lowering.\r\n\r\nIf we do need `compressedRefs`, then `heapBaseKonst` should probably be an `iconst` for 32-bit.",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 193372096,
        "Comment ID": 194732271,
        "Comment Author": "andrewcraik",
        "Comment Order": 1,
        "Comment Body": "Where's the code for this comment? I don't see anything obvious about AOT here",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 193372096,
        "Comment ID": 194910186,
        "Comment Author": "jdmpapin",
        "Comment Order": 6,
        "Comment Body": "I think this is okay because `node` was originally a call and therefore it was assigned a fresh value number.",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 193372096,
        "Comment ID": 195511732,
        "Comment Author": "jdmpapin",
        "Comment Order": 10,
        "Comment Body": "This always requires a constraint on `mh` to guarantee it's a (non-null) `DirectHandle`, even when `receiverConstraint->isNonNullObject()` suffices to eliminate the call without reading `final_modifiers`. Was that intentional?\r\n\r\nI think it's still possible to remove the call even if `mh` could be null. The call would be under a `NULLCHK`, and replacing it with `PassThrough` should leave that `NULLCHK` in place, now checking `mh` without calling.",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 224090121,
        "Comment ID": 229306708,
        "Comment Author": "llxia",
        "Comment Order": 3,
        "Comment Body": "Specify `<subset>Valhalla</subset>` means this test will not run in any regular build. Is this intended to run manually only?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 224090121,
        "Comment ID": 227460749,
        "Comment Author": "acrowthe",
        "Comment Order": 1,
        "Comment Body": "Should be `Integer`, not `Interger`. Occurs on both line 194 and 195",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 224090121,
        "Comment ID": 229307479,
        "Comment Author": "llxia",
        "Comment Order": 4,
        "Comment Body": "Is this parameter used in the test?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 305229740,
        "Comment ID": 311731629,
        "Comment Author": "gita-omr",
        "Comment Order": 1,
        "Comment Body": "I think '{' and '}' should be shifted by 3 spaces.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 375601641,
        "Comment ID": 380791321,
        "Comment Author": "dmitripivkine",
        "Comment Order": 1,
        "Comment Body": "How it suppose to work for run-time selected CR? For all other cases Remembered Set Cards is an array of `MM_RememberedSetCard[]`. So I would assume for run-time selected CR it is U_32 used in each U_64. But code below (add and subtract) suggests cards located contiguously and my assumption is wrong. Did I miss something?\r\nLooks like Remembered Set Cards memory is used like an array of U_32 for CR and array of U_64 and for run-time CR it is not an array of `MM_RememberedSetCard[]` any more. Technically it would work but it is confusing for me slightly. Any opinions on this? ",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 375601641,
        "Comment ID": 383492808,
        "Comment Author": "dmitripivkine",
        "Comment Order": 21,
        "Comment Body": "Would you please remove `++` from `toIndex++` but add `toIndex += 1;` after write?",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 375601641,
        "Comment ID": 383367075,
        "Comment Author": "amicic",
        "Comment Order": 15,
        "Comment Body": "please use MAX_BUFFER_SIZE * MM_RememberedSetCard::cardSize(env->compressObjectReferences()) \r\n\r\nas-is is unclear if it's relying on card size or obj ref size",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 375601641,
        "Comment ID": 383496904,
        "Comment Author": "dmitripivkine",
        "Comment Order": 22,
        "Comment Body": "Same here: could _cardIndex be incremented in separate line please?",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 420274222,
        "Comment ID": 436230101,
        "Comment Author": "gita-omr",
        "Comment Order": 4,
        "Comment Body": "Could you please clarify why this instruction is needed? I thought just lis would be enough for any HI_VALUE.",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 751883514,
        "Comment ID": 738740435,
        "Comment Author": "keithc-ca",
        "Comment Order": 30,
        "Comment Body": "All text files should have a final newline.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 751883514,
        "Comment ID": 729086493,
        "Comment Author": "DanHeidinga",
        "Comment Order": 10,
        "Comment Body": "Modify isn't a great description as this is append only.  Maybe reword as \"Append new env variables to the set returned by ....\"",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 751883514,
        "Comment ID": 729085650,
        "Comment Author": "DanHeidinga",
        "Comment Order": 9,
        "Comment Body": "```suggestion\r\n\t * Modify environment variables returned by ProcessEnvironment.getenv(...) upon\r\n```",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 751883514,
        "Comment ID": 729095215,
        "Comment Author": "DanHeidinga",
        "Comment Order": 13,
        "Comment Body": "What's a stacktrace from the this lambda look like?  Would it aid debugging / problem determination if this was a named entity?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 751883514,
        "Comment ID": 729093239,
        "Comment Author": "DanHeidinga",
        "Comment Order": 12,
        "Comment Body": "```suggestion\r\n\tprivate void registerRestoreEnvVariablesHook() {\r\n```\r\n\r\nClearer name?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 751883514,
        "Comment ID": 738440608,
        "Comment Author": "DanHeidinga",
        "Comment Order": 29,
        "Comment Body": "typo\r\n```suggestion\r\n\t\tboolean debug = System.getProperty(\"enable.j9internal.checkpoint.hook.api.debug\") != null; //$NON-NLS-1$\r\n```",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 751883514,
        "Comment ID": 724262030,
        "Comment Author": "gacholio",
        "Comment Order": 2,
        "Comment Body": "Needs doc - minimally, must specify that exclusive is held.",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 751883514,
        "Comment ID": 724261459,
        "Comment Author": "gacholio",
        "Comment Order": 1,
        "Comment Body": "Is this the same as J9_PRIVATE_FLAGS_SYSTEM_THREAD? If not, both may need to be considered.",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 751883514,
        "Comment ID": 738744263,
        "Comment Author": "keithc-ca",
        "Comment Order": 32,
        "Comment Body": "Inconsistent indentation.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 154852948,
        "Comment ID": 155567175,
        "Comment Author": "ljacomet",
        "Comment Order": 29,
        "Comment Body": "> that takes in a collection of white listed classes authorised for deserialization",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 154852948,
        "Comment ID": 155566654,
        "Comment Author": "ljacomet",
        "Comment Order": 28,
        "Comment Body": "code formatting",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 154852948,
        "Comment ID": 154206017,
        "Comment Author": "chrisdennis",
        "Comment Order": 4,
        "Comment Body": "Should we care if a primitive wrapper class hasn't been whitelisted?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 154852948,
        "Comment ID": 154207967,
        "Comment Author": "chrisdennis",
        "Comment Order": 11,
        "Comment Body": "Should this be whitelisting?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 247744632,
        "Comment ID": 252429884,
        "Comment Author": "allisonbm92",
        "Comment Order": 4,
        "Comment Body": "What is the purpose of this?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 247744632,
        "Comment ID": 252426113,
        "Comment Author": "ashwinraghav",
        "Comment Order": 1,
        "Comment Body": "Nit: We could either have an equivalent getStart() or write this inline as well",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 247744632,
        "Comment ID": 252427014,
        "Comment Author": "ashwinraghav",
        "Comment Order": 3,
        "Comment Body": "`.info` ?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 176826652,
        "Comment ID": 176478432,
        "Comment Author": "pq",
        "Comment Order": 3,
        "Comment Body": "Maybe renaming `str` to `event` would help here?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 255512964,
        "Comment ID": 259558559,
        "Comment Author": "ketan",
        "Comment Order": 1,
        "Comment Body": "Would you not pass an executable to killproc? Am I missing something?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 115215016,
        "Comment ID": 110792335,
        "Comment Author": "shinfan",
        "Comment Order": 1,
        "Comment Body": "rename flex to gae?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 115215016,
        "Comment ID": 110792353,
        "Comment Author": "shinfan",
        "Comment Order": 2,
        "Comment Body": "hex?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 115215016,
        "Comment ID": 110978857,
        "Comment Author": "garrettjonesgoogle",
        "Comment Order": 4,
        "Comment Body": "use a space after keywords (`if`, `for`)",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 415589365,
        "Comment ID": 423975624,
        "Comment Author": "ejona86",
        "Comment Order": 9,
        "Comment Body": "If you use a semicolon, then Multiple should be lower-case. It is probably better to put a period after the first part and have this capitalized.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 415589365,
        "Comment ID": 423975214,
        "Comment Author": "ejona86",
        "Comment Order": 8,
        "Comment Body": "\"a name intended for debugging\"",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 432135317,
        "Comment ID": 439024207,
        "Comment Author": "ZhenLian",
        "Comment Order": 4,
        "Comment Body": "@voidzcy Shall we keep the alphabetical order of this?",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 432135317,
        "Comment ID": 439011248,
        "Comment Author": "voidzcy",
        "Comment Order": 1,
        "Comment Body": "Did you deleted the newline at the end of the file?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 432135317,
        "Comment ID": 439073788,
        "Comment Author": "ZhenLian",
        "Comment Order": 10,
        "Comment Body": "nit: s/envoy/googleapis",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 432135317,
        "Comment ID": 439011455,
        "Comment Author": "voidzcy",
        "Comment Order": 2,
        "Comment Body": "New line at the end of the file.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 169916233,
        "Comment ID": 172807758,
        "Comment Author": "mdogan",
        "Comment Order": 8,
        "Comment Body": "what's this `partitionId` for?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 169916233,
        "Comment ID": 172807928,
        "Comment Author": "mdogan",
        "Comment Order": 9,
        "Comment Body": "Why blocking is needed here? As far as I see, `callDisconnectionOperation(..)` is called from a scheduler thread.",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 169916233,
        "Comment ID": 172808671,
        "Comment Author": "mdogan",
        "Comment Order": 11,
        "Comment Body": "What's the reason of doing a local & blocking invocation on a generic thread?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 45327931,
        "Comment ID": 39838204,
        "Comment Author": "pveentjer",
        "Comment Order": 3,
        "Comment Body": "being local or not is currently not the question.\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 45327931,
        "Comment ID": 39842205,
        "Comment Author": "pveentjer",
        "Comment Order": 18,
        "Comment Body": "Only when you have received a not null runner, you know you are in a nested call.  \n\nSo this conclusion:\n\n```\n // if already running an operation for a partition (id >= 0) it means that it's a nested invocation\n        // in this case partitionId of both nested operations has to match\n```\n\nI'm not following.\n\nThe runner is set and unset on the outer call. So if there is no runner, it must be the outer call.. if there is a runner, there is already an outer call executing.\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 45327931,
        "Comment ID": 39842074,
        "Comment Author": "pveentjer",
        "Comment Order": 17,
        "Comment Body": "I think we should. We should also update the documentation to clearly explain what this method is doing. \n",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 53722387,
        "Comment ID": 50526991,
        "Comment Author": "pveentjer",
        "Comment Order": 42,
        "Comment Body": "But this just happens a few times; right?\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 53722387,
        "Comment ID": 50529365,
        "Comment Author": "pveentjer",
        "Comment Order": 43,
        "Comment Body": "After talking with @toktarev it is fine to be serializable.  Values won't be send very often.\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 53722387,
        "Comment ID": 50707556,
        "Comment Author": "pveentjer",
        "Comment Order": 45,
        "Comment Body": "Could you add some javadoc to the class? \n",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 818551608,
        "Comment ID": 792572952,
        "Comment Author": "ivanthescientist",
        "Comment Order": 5,
        "Comment Body": "Any reason this has to be an array? Just checking. ",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 449718026,
        "Comment ID": 455464283,
        "Comment Author": "NathanQingyangXu",
        "Comment Order": 2,
        "Comment Body": "It is a pattern to get rid of space char uses previously advised. Is that a new format pattern to advocate then?",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 449718026,
        "Comment ID": 455791272,
        "Comment Author": "Sanne",
        "Comment Order": 7,
        "Comment Body": "This looks a bit puzzling. Do you know why it was limited to \"merge\" fetch profiles? \r\n\r\nNow you're expanding the set of operations to all, but the test just wants the load. I see we only use this for \"merge\" and \"refresh\" BTW... I suppose there's not  something special about \"refresh\" that we need to take into account during this load opertion?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 586099109,
        "Comment ID": 589024213,
        "Comment Author": "Siedlerchr",
        "Comment Order": 1,
        "Comment Body": "```suggestion\r\n        when(autoCompletePreferences.getCompleteFields()).thenReturn(Set.of(StandardField.AUTHOR));\r\n```\r\nshould be sufficient, because Set.of already returns a Set",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 586099109,
        "Comment ID": 589263183,
        "Comment Author": "calixtus",
        "Comment Order": 2,
        "Comment Body": "`new BibEntry().withField()`",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 63851500,
        "Comment ID": 57134973,
        "Comment Author": "tobiasdiez",
        "Comment Order": 14,
        "Comment Body": "What is `firstResult`?\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 63851500,
        "Comment ID": 57134126,
        "Comment Author": "stefan-kolb",
        "Comment Order": 6,
        "Comment Body": "Doesn't matter for the test what kind of paper it is, just keep the code clean.\n",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 63851500,
        "Comment ID": 57134006,
        "Comment Author": "stefan-kolb",
        "Comment Order": 5,
        "Comment Body": "Same as above.\n",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 72402427,
        "Comment ID": 65608198,
        "Comment Author": "stefan-kolb",
        "Comment Order": 5,
        "Comment Body": "\"Support separated names with colons\" or something alike?\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 72402427,
        "Comment ID": 76233920,
        "Comment Author": "boceckts",
        "Comment Order": 26,
        "Comment Body": "Please add a java doc comment and describe what this formatter does.\n",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 72402427,
        "Comment ID": 72339648,
        "Comment Author": "koppor",
        "Comment Order": 18,
        "Comment Body": "Space after `for` is missing\n",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 72402427,
        "Comment ID": 76235773,
        "Comment Author": "boceckts",
        "Comment Order": 29,
        "Comment Body": "If you only need each value in a collection, please use a foreach loop as this is more readable in my opinion.\ne.g.:\n\n```\nfor (String name : allNames) {\n    name = name.trim();\n}\n```\n",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 72402427,
        "Comment ID": 76235340,
        "Comment Author": "boceckts",
        "Comment Order": 28,
        "Comment Body": "Please use more appropriate variable names than `value` or `valueParts` since it makes the code really hard to read.\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 72402427,
        "Comment ID": 72339510,
        "Comment Author": "koppor",
        "Comment Order": 17,
        "Comment Body": "The variable is now called \"valuePartsCount\".\n\"valuePartsCount holds the count of name parts without the avoided terms\"\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 72402427,
        "Comment ID": 65608688,
        "Comment Author": "stefan-kolb",
        "Comment Order": 6,
        "Comment Body": "separated\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 72402427,
        "Comment ID": 65608703,
        "Comment Author": "stefan-kolb",
        "Comment Order": 7,
        "Comment Body": "separated\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 105706358,
        "Comment ID": 100871383,
        "Comment Author": "mbrukman",
        "Comment Order": 27,
        "Comment Body": "s/eg./, e.g.,/",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 105706358,
        "Comment ID": 100628625,
        "Comment Author": "ptgoetz",
        "Comment Order": 1,
        "Comment Body": "I'm not sure I understand the impetus behind this paragraph. What would be an example?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 105706358,
        "Comment ID": 100680586,
        "Comment Author": "amcp",
        "Comment Order": 15,
        "Comment Body": "s/shepard/shepherd/",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 105706358,
        "Comment ID": 100871751,
        "Comment Author": "mbrukman",
        "Comment Order": 28,
        "Comment Body": "Did you want to change this to be \"Two +1 votes are required...\"?",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 105706358,
        "Comment ID": 100630421,
        "Comment Author": "ptgoetz",
        "Comment Order": 3,
        "Comment Body": "For CTR, we should have some wording around vetoing (-1) a commit, so if a committer objects to something already committed it can be rolled back.",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 105706358,
        "Comment ID": 100666107,
        "Comment Author": "amcp",
        "Comment Order": 11,
        "Comment Body": "s/(RTC)/(RTC - review-then-commit)/",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 105706358,
        "Comment ID": 100871846,
        "Comment Author": "mbrukman",
        "Comment Order": 29,
        "Comment Body": "s/sheperd/shepherd/g :-)",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 105706358,
        "Comment ID": 100871910,
        "Comment Author": "mbrukman",
        "Comment Order": 30,
        "Comment Body": "s/Github/GitHub/g",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 105706358,
        "Comment ID": 100872490,
        "Comment Author": "mbrukman",
        "Comment Order": 32,
        "Comment Body": "This paragraph is written as a bulleted list (each sentence starts on a new line), but that's not how it will be rendered in HTML. If you'd like it to become a bulleted list, please make it so. Otherwise, please reflow the paragraph so that it reads as it will be rendered.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 117143475,
        "Comment ID": 132818857,
        "Comment Author": "daniel-beck",
        "Comment Order": 17,
        "Comment Body": "Unindented deliberately?",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 26936134,
        "Comment ID": 22688610,
        "Comment Author": "jglick",
        "Comment Order": 11,
        "Comment Body": "BTW for the future please use 4-space indentation to be consistent with other Jenkins code.\n",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 2956884,
        "Comment ID": 2092335,
        "Comment Author": "ndeloof",
        "Comment Order": 1,
        "Comment Body": ".. or itemGroup\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 262441756,
        "Comment ID": 271168150,
        "Comment Author": "hmlnarik",
        "Comment Order": 34,
        "Comment Body": "Typo: for (same on the next row)",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 263502786,
        "Comment ID": 268486125,
        "Comment Author": "minwoox",
        "Comment Order": 3,
        "Comment Body": "nit: missing new line?",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 779843023,
        "Comment ID": 750887600,
        "Comment Author": "minwoox",
        "Comment Order": 1,
        "Comment Body": "nit: We could probably merge these into one line. 😉 \r\n```suggestion\r\n            TextFormat.writeFormat(format, writer, collectorRegistry.metricFamilySamples());\r\n```",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 779843023,
        "Comment ID": 765514457,
        "Comment Author": "ikhoon",
        "Comment Order": 7,
        "Comment Body": "```suggestion\r\n            OutputStreamWriter writer = new OutputStreamWriter(byteBufOutputStream)) {\r\n```",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 779843023,
        "Comment ID": 750888076,
        "Comment Author": "minwoox",
        "Comment Order": 2,
        "Comment Body": "Could you fix the indentation? 😄 \r\nYou might refer to this document to set up the IDE.\r\nhttps://armeria.dev/community/developer-guide#setting-up-your-ide",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 779843023,
        "Comment ID": 750888126,
        "Comment Author": "minwoox",
        "Comment Order": 3,
        "Comment Body": "ditto",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 270368366,
        "Comment ID": 277421177,
        "Comment Author": "dharju",
        "Comment Order": 32,
        "Comment Body": "unnecessary newlines?",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 270368366,
        "Comment ID": 277825268,
        "Comment Author": "dharju",
        "Comment Order": 35,
        "Comment Body": "Typo? \"BlobDet4acryptionCount\"",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 270368366,
        "Comment ID": 277089217,
        "Comment Author": "zzmao",
        "Comment Order": 27,
        "Comment Body": "Use '.VCR' ?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 270368366,
        "Comment ID": 277089233,
        "Comment Author": "zzmao",
        "Comment Order": 28,
        "Comment Body": "Use '.VCR' ?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 306620967,
        "Comment ID": 314481045,
        "Comment Author": "lightningrob",
        "Comment Order": 30,
        "Comment Body": "javadoc",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 306620967,
        "Comment ID": 313671102,
        "Comment Author": "lightningrob",
        "Comment Order": 17,
        "Comment Body": "javadoc",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 306620967,
        "Comment ID": 313668646,
        "Comment Author": "lightningrob",
        "Comment Order": 10,
        "Comment Body": "javadoc class and constructor",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 306620967,
        "Comment ID": 313668721,
        "Comment Author": "lightningrob",
        "Comment Order": 11,
        "Comment Body": "javadoc",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 306620967,
        "Comment ID": 313670118,
        "Comment Author": "lightningrob",
        "Comment Order": 14,
        "Comment Body": "javadoc",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 306620967,
        "Comment ID": 314550894,
        "Comment Author": "jsjtzyy",
        "Comment Order": 44,
        "Comment Body": "if you choose to String.format, can you change it to following style (basically replace `{}` with `%s`):\r\n```\r\nString.format(\"Unexpected exception occurred when parsing the blob id list from %s\", accountBlobIDs);\r\n```\r\nMake change to all occurrences. This can pass intellij inspection. ",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 306620967,
        "Comment ID": 313669916,
        "Comment Author": "lightningrob",
        "Comment Order": 13,
        "Comment Body": "javadoc",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 306620967,
        "Comment ID": 314518879,
        "Comment Author": "jsjtzyy",
        "Comment Order": 36,
        "Comment Body": "better to rename this, current name doesn't quite match the comment.  How about `maxNumOfVersionsInMem` or `maxNumOfCachedVersions`?",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 54517244,
        "Comment ID": 49102894,
        "Comment Author": "vgkholla",
        "Comment Order": 77,
        "Comment Body": "minor typo: \"more\"\n",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 54517244,
        "Comment ID": 49003874,
        "Comment Author": "nsivabalan",
        "Comment Order": 72,
        "Comment Body": "timeToBlockInMs\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 54517244,
        "Comment ID": 49103220,
        "Comment Author": "vgkholla",
        "Comment Order": 79,
        "Comment Body": "will this be useful?\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 54517244,
        "Comment ID": 49378814,
        "Comment Author": "nsivabalan",
        "Comment Order": 122,
        "Comment Body": "can you explain how this is reachable ?\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 80499835,
        "Comment ID": 73932977,
        "Comment Author": "nsivabalan",
        "Comment Order": 1,
        "Comment Body": "what is this used for ? Why do we need this. In real system, do we have a scenario for a partition being unhealthy ? \n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 80499835,
        "Comment ID": 73937603,
        "Comment Author": "nsivabalan",
        "Comment Order": 7,
        "Comment Body": "Can you name this as \"partitionsUnavailable\" \n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 80499835,
        "Comment ID": 73952160,
        "Comment Author": "vgkholla",
        "Comment Order": 10,
        "Comment Body": "doc\n",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 80499835,
        "Comment ID": 73933596,
        "Comment Author": "nsivabalan",
        "Comment Order": 3,
        "Comment Body": "also, when would this happen. Can you give us a scenario.\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 80499835,
        "Comment ID": 73955485,
        "Comment Author": "vgkholla",
        "Comment Order": 11,
        "Comment Body": "doc\n",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 80499835,
        "Comment ID": 73955499,
        "Comment Author": "vgkholla",
        "Comment Order": 12,
        "Comment Body": "doc\n",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 80499835,
        "Comment ID": 73955519,
        "Comment Author": "vgkholla",
        "Comment Order": 13,
        "Comment Body": "doc\n",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 80499835,
        "Comment ID": 73955543,
        "Comment Author": "vgkholla",
        "Comment Order": 14,
        "Comment Body": "doc\n",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 420687889,
        "Comment ID": 592277496,
        "Comment Author": "shakuzen",
        "Comment Order": 3,
        "Comment Body": "```suggestion\r\n     * @return The destination bucket (or db) for writes.\r\n```",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 420687889,
        "Comment ID": 594583118,
        "Comment Author": "jonatan-ivanov",
        "Comment Order": 33,
        "Comment Body": "`to be used for sending metrics`",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 420687889,
        "Comment ID": 594584065,
        "Comment Author": "jonatan-ivanov",
        "Comment Order": 35,
        "Comment Body": "`that is used to send metrics`",
        "Comment Classification": "Documentation"
    },
    {
        "PR ID": 173453233,
        "Comment ID": 173834222,
        "Comment Author": "mario",
        "Comment Order": 1,
        "Comment Body": "new line.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 173453233,
        "Comment ID": 187958713,
        "Comment Author": "mario",
        "Comment Order": 3,
        "Comment Body": "New line.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 109918699,
        "Comment ID": 111690104,
        "Comment Author": "martinvw",
        "Comment Order": 2,
        "Comment Body": "Can you rebase on the current master, fix the merge conflicts and make the order of modifiers for these new lines also `public static final`",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 190600675,
        "Comment ID": 195315202,
        "Comment Author": "kaikreuzer",
        "Comment Order": 20,
        "Comment Body": "you should set quite some channel types to advanced=true - e.g. all the DateTime ones.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 190600675,
        "Comment ID": 195314251,
        "Comment Author": "kaikreuzer",
        "Comment Order": 14,
        "Comment Body": "datetime -> time (this is prosa text)",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 190600675,
        "Comment ID": 195314619,
        "Comment Author": "kaikreuzer",
        "Comment Order": 17,
        "Comment Body": "datetime -> time",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 190600675,
        "Comment ID": 195323541,
        "Comment Author": "kaikreuzer",
        "Comment Order": 28,
        "Comment Body": "I'd suggest a label like \"Local UV Information\"",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 190600675,
        "Comment ID": 195323619,
        "Comment Author": "kaikreuzer",
        "Comment Order": 29,
        "Comment Body": "what's this?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 190600675,
        "Comment ID": 202486612,
        "Comment Author": "wborn",
        "Comment Order": 41,
        "Comment Body": "When the Gson instance is created with `.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)` you can use camel cased field names so they comply with variable naming conventions. It's also used that way in the Nest Binding.",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 249844958,
        "Comment ID": 254138501,
        "Comment Author": "9037568",
        "Comment Order": 3,
        "Comment Body": "Presumably this is a typo.\r\n\r\nShould `pv1:ublic` be `v1:public` here?",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 304071156,
        "Comment ID": 310391538,
        "Comment Author": "thadguidry",
        "Comment Order": 4,
        "Comment Body": "change word choice from \"active\" to \"selected\".  This will help with our future UI changes anticipated for multi-column support.",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 177430823,
        "Comment ID": 179678929,
        "Comment Author": "fpj",
        "Comment Order": 11,
        "Comment Body": "One clarification: why were we not passing `streamTransactionMetadataTasks` before?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 177430823,
        "Comment ID": 179681087,
        "Comment Author": "fpj",
        "Comment Order": 14,
        "Comment Body": "Minor: indentation.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 237600609,
        "Comment ID": 244833449,
        "Comment Author": "tkaitchuck",
        "Comment Order": 5,
        "Comment Body": "Please change your formater to use our convention of putting all imports in alphabetical order followed by all static imports in alphabetical order.",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 253874897,
        "Comment ID": 257664048,
        "Comment Author": "fpj",
        "Comment Order": 1,
        "Comment Body": "If the connect string differs, then I believe the underlying zk client won't have that connect string (we don't recreate the underlying client). As such, I have two questions:\r\n\r\n- Is there any condition under which the connect string actually changes? I'm not talking about giving IP addresses rather than hostnames like described in this PR, but instead really changing the list of servers. A zk ensemble can change its composition with dynamic configuration, but I don't know whether curator will be propagating it through this API.",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 303377547,
        "Comment ID": 312401519,
        "Comment Author": "fpj",
        "Comment Order": 10,
        "Comment Body": "I don't understand this change.",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 303377547,
        "Comment ID": 312401619,
        "Comment Author": "fpj",
        "Comment Order": 11,
        "Comment Body": "I don't understand this change either.",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 303377547,
        "Comment ID": 312404101,
        "Comment Author": "fpj",
        "Comment Order": 14,
        "Comment Body": "I don't understand the purpose of this flag. Why would we want to ignore data not found sometimes?",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 303377547,
        "Comment ID": 312402078,
        "Comment Author": "fpj",
        "Comment Order": 12,
        "Comment Body": "Why is this in this PR? It seems unrelated.",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 5203995,
        "Comment ID": 3827472,
        "Comment Author": "jmhofer",
        "Comment Order": 11,
        "Comment Body": "I'd strongly prefer a `TimeSpan` class, because this is what we mean semantically. `delayTime` and `TimeUnit` make no sense to me as standalone parameters. This can lead to bugs, for example when people copy over delayTime somewhere but forget to copy the time units, too.\n",
        "Comment Classification": "Naming Conventions"
    },
    {
        "PR ID": 5203995,
        "Comment ID": 3827540,
        "Comment Author": "jmhofer",
        "Comment Order": 14,
        "Comment Body": "Actually, I've been wondering about this myself. Not sure, but I think that it does the right thing, although together with sleeps, it's not particularly useful (either way).\n",
        "Comment Classification": "Understanding"
    },
    {
        "PR ID": 83781452,
        "Comment ID": 78139587,
        "Comment Author": "cmelchior",
        "Comment Order": 2,
        "Comment Body": "We really need to agree on style guides for JNI. If statements are done in two different ways within 6 lines 😄 \n",
        "Comment Classification": "Code Style & Formatting"
    },
    {
        "PR ID": 83781452,
        "Comment ID": 78139846,
        "Comment Author": "cmelchior",
        "Comment Order": 4,
        "Comment Body": "Isn't this a big breaking change. It basically means we no longer support null primary keys?\n",
        "Comment Classification": "Understanding"
    }
]